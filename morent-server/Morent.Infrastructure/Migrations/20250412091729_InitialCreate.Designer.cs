// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Morent.Infrastructure.Data;

#nullable disable

namespace Morent.Infrastructure.Migrations
{
    [DbContext(typeof(MorentDbContext))]
    [Migration("20250412091729_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Morent.Core.Entities.MorentCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarModelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarModelId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentCarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FuelCapacityLitter")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("SteeringType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarTypeId");

                    b.ToTable("CarModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "",
                            Capacity = 2,
                            CarTypeId = 1,
                            FuelCapacityLitter = 90,
                            Model = "Koenigsegg",
                            PricePerDay = 99m,
                            SteeringType = "Manual"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Nissan",
                            Capacity = 2,
                            CarTypeId = 1,
                            FuelCapacityLitter = 80,
                            Model = "Nissan GT-R",
                            PricePerDay = 100m,
                            SteeringType = "Manual"
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Rolls-Royce",
                            Capacity = 4,
                            CarTypeId = 1,
                            FuelCapacityLitter = 70,
                            Model = "Rolls-Royce",
                            PricePerDay = 96m,
                            SteeringType = "Manual"
                        },
                        new
                        {
                            Id = 4,
                            Brand = "",
                            Capacity = 6,
                            CarTypeId = 2,
                            FuelCapacityLitter = 70,
                            Model = "All New Rush",
                            PricePerDay = 80m,
                            SteeringType = "Manual"
                        },
                        new
                        {
                            Id = 5,
                            Brand = "",
                            Capacity = 6,
                            CarTypeId = 2,
                            FuelCapacityLitter = 80,
                            Model = "CR-V",
                            PricePerDay = 80m,
                            SteeringType = "Manual"
                        },
                        new
                        {
                            Id = 6,
                            Brand = "",
                            Capacity = 6,
                            CarTypeId = 2,
                            FuelCapacityLitter = 90,
                            Model = "All New Terios",
                            PricePerDay = 72m,
                            SteeringType = "Manual"
                        },
                        new
                        {
                            Id = 7,
                            Brand = "",
                            Capacity = 4,
                            CarTypeId = 6,
                            FuelCapacityLitter = 70,
                            Model = "MG ZX Exclusive",
                            PricePerDay = 80m,
                            SteeringType = "Electric"
                        },
                        new
                        {
                            Id = 8,
                            Brand = "",
                            Capacity = 6,
                            CarTypeId = 2,
                            FuelCapacityLitter = 80,
                            Model = "New MG ZS",
                            PricePerDay = 80m,
                            SteeringType = "Manual"
                        },
                        new
                        {
                            Id = 9,
                            Brand = "",
                            Capacity = 4,
                            CarTypeId = 6,
                            FuelCapacityLitter = 90,
                            Model = "MG ZX Excite",
                            PricePerDay = 74m,
                            SteeringType = "Electric"
                        });
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentCarType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CarTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Suv"
                        },
                        new
                        {
                            Id = 3,
                            Name = "MPV"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Coupe"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Hatchback"
                        });
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentFavorite", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("CarId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "CarId");

                    b.HasIndex("CarId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CarModelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarModelId");

                    b.HasIndex("UserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RentalId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RentalId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentRental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RentalStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentRentalDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DropoffDateTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("DropoffLat")
                        .HasColumnType("REAL");

                    b.Property<double>("DropoffLng")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("PickupDateTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("PickupLat")
                        .HasColumnType("REAL");

                    b.Property<double>("PickupLng")
                        .HasColumnType("REAL");

                    b.Property<int>("RentalId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RentalId")
                        .IsUnique();

                    b.ToTable("RentalDetails");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rating")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentCar", b =>
                {
                    b.HasOne("Morent.Core.Entities.MorentCarModel", "CarModel")
                        .WithMany("Cars")
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarModel");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentCarModel", b =>
                {
                    b.HasOne("Morent.Core.Entities.MorentCarType", "CarType")
                        .WithMany("CarModels")
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarType");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentFavorite", b =>
                {
                    b.HasOne("Morent.Core.Entities.MorentCar", "Car")
                        .WithMany("Favorites")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Morent.Core.Entities.MorentUser", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentImage", b =>
                {
                    b.HasOne("Morent.Core.Entities.MorentCarModel", "CarModel")
                        .WithMany("Image")
                        .HasForeignKey("CarModelId");

                    b.HasOne("Morent.Core.Entities.MorentUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CarModel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentPayment", b =>
                {
                    b.HasOne("Morent.Core.Entities.MorentRental", "Rental")
                        .WithOne("Payment")
                        .HasForeignKey("Morent.Core.Entities.MorentPayment", "RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentRental", b =>
                {
                    b.HasOne("Morent.Core.Entities.MorentCar", "Car")
                        .WithMany("Rentals")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Morent.Core.Entities.MorentUser", "User")
                        .WithMany("Rentals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentRentalDetail", b =>
                {
                    b.HasOne("Morent.Core.Entities.MorentRental", "Rental")
                        .WithOne("RentalDetail")
                        .HasForeignKey("Morent.Core.Entities.MorentRentalDetail", "RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentReview", b =>
                {
                    b.HasOne("Morent.Core.Entities.MorentCar", "Car")
                        .WithMany("Reviews")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Morent.Core.Entities.MorentUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentCar", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Rentals");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentCarModel", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentCarType", b =>
                {
                    b.Navigation("CarModels");
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentRental", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("RentalDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("Morent.Core.Entities.MorentUser", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Rentals");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
